What happens when you initialize a repository? Why do you need to do it?

When git initializes repository it creates .git directory and inside this
directory git creates needed metadata files and makes some preparations.
We need to run git init to be able to use git on files under that directory.
Saying simple, we do 'git init' when we decide to use version control.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

It's different from working directory. When you want to make commit you should
place file into staging area first and then make commit to store that file
into repository. Staging area concept allows us to make changes to many files
but add only few of them to repository, also staging area concept offers
ability to have untracked files that we don't want to include into clean
repository (object files, some helpers, etc).

How can you use the staging area to make sure you have one commit
per logical change?

Add some files to staging area using 'git add'. Then use 'git diff --staged' to
ensure that change is logical. Then make commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches can be used when you want to expreriment or make special branch for
stable release, and continue active development on master, but fix bugs on
stable branch.

How do the diagrams help you visualize the branch structure?

By its nature branches/commits are nodes of tree structure. Thats why it is
easier to understand tree structure visualizing it.

What is the result of merging two branches together? Why do we represent it in 
the diagram the way we do?

Result of merging two branches is commit with two parents. This commit is
labeled with current branch (branch that was checked-out). But second branch
is not changed, it is still targeting own top commit so we can continue
developing thing separately after including some changes from that branch.
Anyway we can safely delete such branch if we do not need it anymore.
Deleting branch is just deleting fancy name of commit. That commit is still 
reachable from current HEAD.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Automatic merging can be used when changes are made on different parts of code.
Sadly sometimes such auto merging can break app logic. Pros of malual merging:
you can review changes based on your knowledge about problem area. Computer
definetely would know less than you in this area. Cons of manual mergin is that
process takes a bit more time than automatic merge.



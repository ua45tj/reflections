When would you want to use a remote repository rather than keeping all your work
local?

    Using remote repositories allows me to work from different computers and places.
    It also allows multiple people to work on same project. 

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Remote repository could be used by multiple people working on same project.
    What would happen if some of these persons make changes in the same file
    and function you are working on right now? You doubtly want to have your
    code be constantly changing while you are working. That could lead to some
    strange conflicts. So it's preferable to pull manualy when your repository
    is in logicaly ready state.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Branch is just fancy name to some commit. Each commit has its parent or
    several parents. So to have quick access to some commits we use branches.
    Clone is full-copy of repository. Clones could be as local (inside your
    own filesystem) as remote (e.g. when you are cloning from github).
    Fork is kinda like clone from one account on github to other account on
    github. We can use forks if we want to make some changes without having
    permission to edit original remository.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can cut off internet connection and hide into some bunker and code
    for 12 weeks not-stop. Your repository would have all history of changes.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would use shared folders and diff-tools like meld to compare files when
    merging. Or we could be working on same project turn by turn not working
    together simultaneously. Merging would be harder but its easy for people
    to understand shared folders and work in turns rather than git branches
    and complex graph trees.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    There are some cases when you want to experiment to develop some tricky
    feature but do not want to mess up production code branch with these new
    untested feature. Sometimes you may want to mantain multiple branches.
    For example, production stable (only bugfixes), development master (main
    development branch), cool feature (experimental development branch).
    When working only on master branch it is much easier to understand
    tree structure of different commits for my opinion. Merges are a easier.
    But having multiple branches could be very useful on large projects.
